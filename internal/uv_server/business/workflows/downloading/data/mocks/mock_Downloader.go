// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	sync "sync"

	mock "github.com/stretchr/testify/mock"
)

// MockDownloader is an autogenerated mock type for the Downloader type
type MockDownloader struct {
	mock.Mock
}

type MockDownloader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDownloader) EXPECT() *MockDownloader_Expecter {
	return &MockDownloader_Expecter{mock: &_m.Mock}
}

// Download provides a mock function with given fields: wg, url, storageDir
func (_m *MockDownloader) Download(wg *sync.WaitGroup, url string, storageDir string) {
	_m.Called(wg, url, storageDir)
}

// MockDownloader_Download_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Download'
type MockDownloader_Download_Call struct {
	*mock.Call
}

// Download is a helper method to define mock.On call
//   - wg *sync.WaitGroup
//   - url string
//   - storageDir string
func (_e *MockDownloader_Expecter) Download(wg interface{}, url interface{}, storageDir interface{}) *MockDownloader_Download_Call {
	return &MockDownloader_Download_Call{Call: _e.mock.On("Download", wg, url, storageDir)}
}

func (_c *MockDownloader_Download_Call) Run(run func(wg *sync.WaitGroup, url string, storageDir string)) *MockDownloader_Download_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sync.WaitGroup), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDownloader_Download_Call) Return() *MockDownloader_Download_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDownloader_Download_Call) RunAndReturn(run func(*sync.WaitGroup, string, string)) *MockDownloader_Download_Call {
	_c.Run(run)
	return _c
}

// NewMockDownloader creates a new instance of MockDownloader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDownloader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDownloader {
	mock := &MockDownloader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
