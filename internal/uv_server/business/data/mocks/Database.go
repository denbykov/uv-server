// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	data "uv_server/internal/uv_server/business/data"

	mock "github.com/stretchr/testify/mock"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// DeleteFile provides a mock function with given fields: file
func (_m *Database) DeleteFile(file *data.File) error {
	ret := _m.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*data.File) error); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFileByUrl provides a mock function with given fields: url
func (_m *Database) GetFileByUrl(url string) (*data.File, error) {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for GetFileByUrl")
	}

	var r0 *data.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*data.File, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(string) *data.File); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.File)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertFile provides a mock function with given fields: file
func (_m *Database) InsertFile(file *data.File) (int64, error) {
	ret := _m.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for InsertFile")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*data.File) (int64, error)); ok {
		return rf(file)
	}
	if rf, ok := ret.Get(0).(func(*data.File) int64); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*data.File) error); ok {
		r1 = rf(file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFilePath provides a mock function with given fields: file
func (_m *Database) UpdateFilePath(file *data.File) error {
	ret := _m.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFilePath")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*data.File) error); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateFileStatus provides a mock function with given fields: file
func (_m *Database) UpdateFileStatus(file *data.File) error {
	ret := _m.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFileStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*data.File) error); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
