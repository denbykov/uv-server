// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	data "uv_server/internal/uv_server/business/data"
	jobmessages "uv_server/internal/uv_server/business/workflows/get_files/job_messages"
	job_messages "uv_server/internal/uv_server/business/workflows/get_settings/job_messages"

	mock "github.com/stretchr/testify/mock"

	set_settingsjob_messages "uv_server/internal/uv_server/business/workflows/set_settings/job_messages"
)

// MockDatabase is an autogenerated mock type for the Database type
type MockDatabase struct {
	mock.Mock
}

type MockDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabase) EXPECT() *MockDatabase_Expecter {
	return &MockDatabase_Expecter{mock: &_m.Mock}
}

// DeleteFile provides a mock function with given fields: file
func (_m *MockDatabase) DeleteFile(file *data.File) error {
	ret := _m.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*data.File) error); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_DeleteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFile'
type MockDatabase_DeleteFile_Call struct {
	*mock.Call
}

// DeleteFile is a helper method to define mock.On call
//   - file *data.File
func (_e *MockDatabase_Expecter) DeleteFile(file interface{}) *MockDatabase_DeleteFile_Call {
	return &MockDatabase_DeleteFile_Call{Call: _e.mock.On("DeleteFile", file)}
}

func (_c *MockDatabase_DeleteFile_Call) Run(run func(file *data.File)) *MockDatabase_DeleteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*data.File))
	})
	return _c
}

func (_c *MockDatabase_DeleteFile_Call) Return(_a0 error) *MockDatabase_DeleteFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_DeleteFile_Call) RunAndReturn(run func(*data.File) error) *MockDatabase_DeleteFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileByUrl provides a mock function with given fields: url
func (_m *MockDatabase) GetFileByUrl(url string) (*data.File, error) {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for GetFileByUrl")
	}

	var r0 *data.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*data.File, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(string) *data.File); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.File)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetFileByUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileByUrl'
type MockDatabase_GetFileByUrl_Call struct {
	*mock.Call
}

// GetFileByUrl is a helper method to define mock.On call
//   - url string
func (_e *MockDatabase_Expecter) GetFileByUrl(url interface{}) *MockDatabase_GetFileByUrl_Call {
	return &MockDatabase_GetFileByUrl_Call{Call: _e.mock.On("GetFileByUrl", url)}
}

func (_c *MockDatabase_GetFileByUrl_Call) Run(run func(url string)) *MockDatabase_GetFileByUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDatabase_GetFileByUrl_Call) Return(_a0 *data.File, _a1 error) *MockDatabase_GetFileByUrl_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetFileByUrl_Call) RunAndReturn(run func(string) (*data.File, error)) *MockDatabase_GetFileByUrl_Call {
	_c.Call.Return(run)
	return _c
}

// GetFilesForGFW provides a mock function with given fields: request
func (_m *MockDatabase) GetFilesForGFW(request *jobmessages.Request) (*jobmessages.Result, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for GetFilesForGFW")
	}

	var r0 *jobmessages.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(*jobmessages.Request) (*jobmessages.Result, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*jobmessages.Request) *jobmessages.Result); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jobmessages.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(*jobmessages.Request) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetFilesForGFW_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFilesForGFW'
type MockDatabase_GetFilesForGFW_Call struct {
	*mock.Call
}

// GetFilesForGFW is a helper method to define mock.On call
//   - request *jobmessages.Request
func (_e *MockDatabase_Expecter) GetFilesForGFW(request interface{}) *MockDatabase_GetFilesForGFW_Call {
	return &MockDatabase_GetFilesForGFW_Call{Call: _e.mock.On("GetFilesForGFW", request)}
}

func (_c *MockDatabase_GetFilesForGFW_Call) Run(run func(request *jobmessages.Request)) *MockDatabase_GetFilesForGFW_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*jobmessages.Request))
	})
	return _c
}

func (_c *MockDatabase_GetFilesForGFW_Call) Return(_a0 *jobmessages.Result, _a1 error) *MockDatabase_GetFilesForGFW_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetFilesForGFW_Call) RunAndReturn(run func(*jobmessages.Request) (*jobmessages.Result, error)) *MockDatabase_GetFilesForGFW_Call {
	_c.Call.Return(run)
	return _c
}

// GetSettingsForGSW provides a mock function with no fields
func (_m *MockDatabase) GetSettingsForGSW() (*job_messages.Result, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSettingsForGSW")
	}

	var r0 *job_messages.Result
	var r1 error
	if rf, ok := ret.Get(0).(func() (*job_messages.Result, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *job_messages.Result); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*job_messages.Result)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetSettingsForGSW_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSettingsForGSW'
type MockDatabase_GetSettingsForGSW_Call struct {
	*mock.Call
}

// GetSettingsForGSW is a helper method to define mock.On call
func (_e *MockDatabase_Expecter) GetSettingsForGSW() *MockDatabase_GetSettingsForGSW_Call {
	return &MockDatabase_GetSettingsForGSW_Call{Call: _e.mock.On("GetSettingsForGSW")}
}

func (_c *MockDatabase_GetSettingsForGSW_Call) Run(run func()) *MockDatabase_GetSettingsForGSW_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatabase_GetSettingsForGSW_Call) Return(_a0 *job_messages.Result, _a1 error) *MockDatabase_GetSettingsForGSW_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetSettingsForGSW_Call) RunAndReturn(run func() (*job_messages.Result, error)) *MockDatabase_GetSettingsForGSW_Call {
	_c.Call.Return(run)
	return _c
}

// GetSorageDir provides a mock function with no fields
func (_m *MockDatabase) GetSorageDir() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSorageDir")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetSorageDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSorageDir'
type MockDatabase_GetSorageDir_Call struct {
	*mock.Call
}

// GetSorageDir is a helper method to define mock.On call
func (_e *MockDatabase_Expecter) GetSorageDir() *MockDatabase_GetSorageDir_Call {
	return &MockDatabase_GetSorageDir_Call{Call: _e.mock.On("GetSorageDir")}
}

func (_c *MockDatabase_GetSorageDir_Call) Run(run func()) *MockDatabase_GetSorageDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatabase_GetSorageDir_Call) Return(_a0 string, _a1 error) *MockDatabase_GetSorageDir_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetSorageDir_Call) RunAndReturn(run func() (string, error)) *MockDatabase_GetSorageDir_Call {
	_c.Call.Return(run)
	return _c
}

// InsertFile provides a mock function with given fields: file
func (_m *MockDatabase) InsertFile(file *data.File) (int64, error) {
	ret := _m.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for InsertFile")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*data.File) (int64, error)); ok {
		return rf(file)
	}
	if rf, ok := ret.Get(0).(func(*data.File) int64); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*data.File) error); ok {
		r1 = rf(file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_InsertFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertFile'
type MockDatabase_InsertFile_Call struct {
	*mock.Call
}

// InsertFile is a helper method to define mock.On call
//   - file *data.File
func (_e *MockDatabase_Expecter) InsertFile(file interface{}) *MockDatabase_InsertFile_Call {
	return &MockDatabase_InsertFile_Call{Call: _e.mock.On("InsertFile", file)}
}

func (_c *MockDatabase_InsertFile_Call) Run(run func(file *data.File)) *MockDatabase_InsertFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*data.File))
	})
	return _c
}

func (_c *MockDatabase_InsertFile_Call) Return(_a0 int64, _a1 error) *MockDatabase_InsertFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_InsertFile_Call) RunAndReturn(run func(*data.File) (int64, error)) *MockDatabase_InsertFile_Call {
	_c.Call.Return(run)
	return _c
}

// SetSettingsForSSW provides a mock function with given fields: settings
func (_m *MockDatabase) SetSettingsForSSW(settings *set_settingsjob_messages.Request) (*set_settingsjob_messages.Result, error) {
	ret := _m.Called(settings)

	if len(ret) == 0 {
		panic("no return value specified for SetSettingsForSSW")
	}

	var r0 *set_settingsjob_messages.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(*set_settingsjob_messages.Request) (*set_settingsjob_messages.Result, error)); ok {
		return rf(settings)
	}
	if rf, ok := ret.Get(0).(func(*set_settingsjob_messages.Request) *set_settingsjob_messages.Result); ok {
		r0 = rf(settings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*set_settingsjob_messages.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(*set_settingsjob_messages.Request) error); ok {
		r1 = rf(settings)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_SetSettingsForSSW_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSettingsForSSW'
type MockDatabase_SetSettingsForSSW_Call struct {
	*mock.Call
}

// SetSettingsForSSW is a helper method to define mock.On call
//   - settings *set_settingsjob_messages.Request
func (_e *MockDatabase_Expecter) SetSettingsForSSW(settings interface{}) *MockDatabase_SetSettingsForSSW_Call {
	return &MockDatabase_SetSettingsForSSW_Call{Call: _e.mock.On("SetSettingsForSSW", settings)}
}

func (_c *MockDatabase_SetSettingsForSSW_Call) Run(run func(settings *set_settingsjob_messages.Request)) *MockDatabase_SetSettingsForSSW_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*set_settingsjob_messages.Request))
	})
	return _c
}

func (_c *MockDatabase_SetSettingsForSSW_Call) Return(_a0 *set_settingsjob_messages.Result, _a1 error) *MockDatabase_SetSettingsForSSW_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_SetSettingsForSSW_Call) RunAndReturn(run func(*set_settingsjob_messages.Request) (*set_settingsjob_messages.Result, error)) *MockDatabase_SetSettingsForSSW_Call {
	_c.Call.Return(run)
	return _c
}

// SetSorageDir provides a mock function with given fields: pathDir
func (_m *MockDatabase) SetSorageDir(pathDir string) error {
	ret := _m.Called(pathDir)

	if len(ret) == 0 {
		panic("no return value specified for SetSorageDir")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(pathDir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_SetSorageDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSorageDir'
type MockDatabase_SetSorageDir_Call struct {
	*mock.Call
}

// SetSorageDir is a helper method to define mock.On call
//   - pathDir string
func (_e *MockDatabase_Expecter) SetSorageDir(pathDir interface{}) *MockDatabase_SetSorageDir_Call {
	return &MockDatabase_SetSorageDir_Call{Call: _e.mock.On("SetSorageDir", pathDir)}
}

func (_c *MockDatabase_SetSorageDir_Call) Run(run func(pathDir string)) *MockDatabase_SetSorageDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDatabase_SetSorageDir_Call) Return(_a0 error) *MockDatabase_SetSorageDir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_SetSorageDir_Call) RunAndReturn(run func(string) error) *MockDatabase_SetSorageDir_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFilePath provides a mock function with given fields: file
func (_m *MockDatabase) UpdateFilePath(file *data.File) error {
	ret := _m.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFilePath")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*data.File) error); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_UpdateFilePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFilePath'
type MockDatabase_UpdateFilePath_Call struct {
	*mock.Call
}

// UpdateFilePath is a helper method to define mock.On call
//   - file *data.File
func (_e *MockDatabase_Expecter) UpdateFilePath(file interface{}) *MockDatabase_UpdateFilePath_Call {
	return &MockDatabase_UpdateFilePath_Call{Call: _e.mock.On("UpdateFilePath", file)}
}

func (_c *MockDatabase_UpdateFilePath_Call) Run(run func(file *data.File)) *MockDatabase_UpdateFilePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*data.File))
	})
	return _c
}

func (_c *MockDatabase_UpdateFilePath_Call) Return(_a0 error) *MockDatabase_UpdateFilePath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_UpdateFilePath_Call) RunAndReturn(run func(*data.File) error) *MockDatabase_UpdateFilePath_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFileStatus provides a mock function with given fields: file
func (_m *MockDatabase) UpdateFileStatus(file *data.File) error {
	ret := _m.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFileStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*data.File) error); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_UpdateFileStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFileStatus'
type MockDatabase_UpdateFileStatus_Call struct {
	*mock.Call
}

// UpdateFileStatus is a helper method to define mock.On call
//   - file *data.File
func (_e *MockDatabase_Expecter) UpdateFileStatus(file interface{}) *MockDatabase_UpdateFileStatus_Call {
	return &MockDatabase_UpdateFileStatus_Call{Call: _e.mock.On("UpdateFileStatus", file)}
}

func (_c *MockDatabase_UpdateFileStatus_Call) Run(run func(file *data.File)) *MockDatabase_UpdateFileStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*data.File))
	})
	return _c
}

func (_c *MockDatabase_UpdateFileStatus_Call) Return(_a0 error) *MockDatabase_UpdateFileStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_UpdateFileStatus_Call) RunAndReturn(run func(*data.File) error) *MockDatabase_UpdateFileStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDatabase creates a new instance of MockDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabase {
	mock := &MockDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
